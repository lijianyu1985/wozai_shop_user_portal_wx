<style lang="less">
.bottom-checkout-button {
  display: flex;
  min-width: 25%;
}
.bottom-checkout-button button {
  width: 100%;
}
.bottom-checkout-button-container {
  width: 100%;
  display: flex;
  background-color: white;
}
.bottom-checkout-total {
  flex-grow: 1;
  display: flex;
  margin-left: 10px;
  align-self: center;
}
.cartitem {
  margin-top: 10px;
}
</style>

<template>
  <view class="container">
    <block
      wx:for="{{cart.cartItems}}"
      wx:for-item="cartItem"
      wx:key="index"
    >
      <cartitem
        class="cartitem"
        @refresh-into-cart="refreshItemIntoCart"
        @remove-from-cart="removeItemFromCart"
        item="{{cartItem}}"
        width="{{windowWidth-200}}"
      />
    </block>
    <view class="bottom-checkout-button-container">
      <view class="bottom-checkout-total">合计：￥{{totalAllText}}</view>
      <van-button
        bind:click="onCheckoutClick"
        disabled="{{disableCheckout}}"
        class="bottom-checkout-button"
        type="primary"
      >结算</van-button>
    </view>
    <van-dialog
      id="van-dialog-auth-login"
      bind:getuserinfo="processLogin"
    />
    <van-dialog id="van-dialog" />
  </view>
</template>

<script>
import wepy from '@wepy/core';
import store from '../store';
import { mapState, mapActions } from '@wepy/redux';
import { ADDINTOCART, REMOVEFROMCART } from '../store/types';
import AUTH from '../utils/auth';
import req from '../req';
import Dialog from '../components/vant/dialog/dialog';

wepy.page({
  store,
  config: {
    navigationBarTitleText: 'test',
  },
  data: {
    windowWidth: 0,
    userId: '',
    order: {},
  },
  computed: {
    ...mapState(['cart']),
    total: function() {
      let total = 0;
      for (let i = 0; i < this.cart.cartItems.length; i++) {
        if (this.cart.cartItems[i].checked) {
          total =
            total +
            this.cart.cartItems[i].count * this.cart.cartItems[i].sku.price;
        }
      }
      return total;
    },
    totalAllText: function() {
      return this.total.toFixed(2);
    },
    disableCheckout: function() {
      return !this.cart.cartItems.find((x) => x.checked);
    },
    cartItems: function() {
      return this.cart.cartItems.filter((x) => x.checked);
    },
  },
  methods: {
    ...mapActions({
      addIntoCart: ADDINTOCART,
      removeFromCart: REMOVEFROMCART,
    }),
    createOrder() {
      if (!this.disableCheckout) {
        req.order
          .create({
            commodityItems: this.cartItems.map((x) => {
              return {
                count: x.count,
                commodity: {
                  _id: x.commodity.id,
                  name: x.commodity.name,
                  photo: x.commodity.photo,
                  priceRange: x.commodity.priceRange,
                  weight: x.commodity.weight,
                  defaultSubdivide: x.commodity.defaultSubdivide,
                },
                sku: {
                  _id: x.sku._id,
                  amount: x.sku.amount,
                  code: x.sku.code,
                  commodityId: x.sku.commodityId,
                  price: x.sku.price,
                  subdivide: x.sku.subdivide,
                },
              };
            }),
          })
          .then((res) => {
            if (res && res.success) {
              wx.navigateTo({
                url: '/pages/checkout',
                success: function(pageOpenRes) {
                  pageOpenRes.eventChannel.emit('acceptOrderFromCart', {
                    order: res.order,
                  });
                },
              });
            }
          });
      }
    },
    processLogin(e) {
      if (!e.$wx.detail.userInfo) {
        wx.showToast({
          title: '已取消',
          icon: 'none',
        });
        return;
      }
      AUTH.login(this, e.$wx.detail.userInfo);
    },
    onCheckoutClick(e) {
      if (!this.disableCheckout) {
        AUTH.checkHasLogined().then((isLogined) => {
          if (isLogined) {
            //检查是否已经有未完成订单
            req.order.hasCreatedOrder().then((res) => {
              let createNew = false;
              if (res.hasCreatedOrder) {
                //弹框提示
                Dialog.confirm({
                  message: '您有未完成的订单，新建订单将删除未完成的订单。',
                  confirmButtonText: '继续未完成的订单',
                  cancelButtonText: '新建订单',
                })
                  .then(() => {
                    wx.navigateTo({
                      url: '/pages/checkout',
                      success: function(pageOpenRes) {
                        pageOpenRes.eventChannel.emit('acceptOrderFromCart', {
                          order: res.order,
                        });
                      },
                    });
                  })
                  .catch(() => {
                    this.createOrder();
                  });
              } else {
                this.createOrder();
              }
            });
          } else {
            AUTH.openLoginDialog();
          }
        });
      }
    },
    refreshItemIntoCart(commodity, sku, count, checked) {
      this.addIntoCart({
        cartItem: {
          commodity,
          sku,
          count,
          checked,
        },
      });
    },
    removeItemFromCart(commodity, sku, count) {
      this.removeFromCart({
        cartItem: {
          commodity,
          sku,
          count,
        },
      });
      if (this.cart.cartItems.length === 0) {
        wx.removeTabBarBadge({
          index: 1,
        });
      }
    },
    refreshCartStatus() {
      if (this.cart.cartItems.length) {
        wx.setTabBarBadge({
          index: 1,
          text: '...',
        });
      }
    },
  },
  onShow() {
    this.refreshCartStatus();
  },
  onLoad() {
    let that = this;
    wx.getSystemInfo({
      success: function(res) {
        that.windowHeight = res.windowHeight;
        that.windowWidth = res.windowWidth;
      },
    });
    this.userId = wx.getStorageSync('uid');
  },
});
</script>

<config>
{
    "navigationBarTitleText": "老三家",
    "usingComponents": {
      "van-button": "~@/components/vant/button",
      "cartitem": "~@/components/cartitem",
      "van-dialog": "~@/components/vant/dialog",
    }
}
</config>
