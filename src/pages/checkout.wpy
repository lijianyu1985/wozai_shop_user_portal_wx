<style lang="less">
.bottom-checkout-button {
  display: flex;
  min-width: 25%;
}
.bottom-checkout-button button {
  width: 100%;
}
.bottom-checkout-button-container {
  width: 100%;
  display: flex;
  height: 44px;
  border: 2px solid rgb(248, 248, 255);
  background-color: white;
}
.bottom-checkout-total {
  flex-grow: 1;
  display: flex;
  margin-left: 10px;
  align-self: center;
  color: red;
}
.address-container {
  display: flex;
  padding: 5px 5px 5px 5px;
  flex-direction: row;
  justify-content: space-between;
}
.address-container:active {
  background-color: #e6ebee;
}
.address-info-container {
  display: flex;
  flex-direction: column;
}
.address-container-province {
  font-size: 10px;
  opacity: 0.62;
}
.address-container-name {
  font-size: 10px;
  opacity: 0.62;
}
.items-container {
  width: 100%;
  background-color: #fff;
}
</style>

<template>
  <view class="container">
    <view class="items-container">
      <scroll-view
        class="items-scroll-view"
        scroll-y
        scroll-with-animation="true"
        style="height:{{windowHeight-48}}px;width:100%;"
      >
        <view
          class="address-container"
          bind:click="onAddressClick"
        >
          <view class="address-info-container">
            <view class="address-container-province">
              {{address && address.province}}
              {{address && address.city}}
              {{address && address.county}}
            </view>
            <view class="address-container-address">
              {{address && address.address}}
            </view>
            <view class="address-container-name">
              {{address && address.name}}
              {{address && address.phone}}
            </view>
          </view>
          <van-icon name="arrow" />
        </view>
        <van-divider customStyle="margin: 2px 0px 2px 0px;" />
        <block
          wx:for="{{commodityItems}}"
          wx:for-item="checkoutitem"
          wx:key="index"
        >
          <checkoutitem
            item="{{checkoutitem}}"
            width="{{windowWidth-130}}"
          />
        </block>
        <van-divider customStyle="margin: 2px 0px 2px 0px;" />
        <van-field
          value="{{ description }}"
          bind:change="onDescriptionChange"
          label="留言"
          type="textarea"
          placeholder="请输入留言"
          autosize
          border="{{ false }}"
        />
        <van-divider customStyle="margin: 2px 0px 2px 0px;" />
        <checkoutsummary
          total="{{total}}"
          shippingFee="{{shippingFee}}"
          discount="{{discount}}"
        />
      </scroll-view>
    </view>
    <view class="bottom-checkout-button-container">
      <view class="bottom-checkout-total">合计：￥{{totalAllText}}</view>
      <van-button
        bind:click="onCheckoutClick"
        disabled="{{disableCheckout}}"
        class="bottom-checkout-button"
        type="primary"
      >支付</van-button>
    </view>
  </view>
</template>

<script>
import wepy from '@wepy/core';
import store from '../store';
import { mapState, mapActions } from '@wepy/redux';
import req from '../req';
import { shippingFee } from '../utils/settings';

wepy.page({
  store,
  config: {
    navigationBarTitleText: 'test',
  },
  data: {
    windowWidth: 0,
    windowHeight: 0,
    address: {},
    total: 0,
    shippingFee: shippingFee,
    discount: 0,
    commodityItems: [],
    order: {},
    description: '',
  },
  computed: {
    discount: function() {
      if (this.order && this.order._id) {
        return this.order.rate.discount;
      }
      return 0;
    },
    total: function() {
      if (this.order && this.order._id) {
        return this.order.rate.commodityCost;
      }
      return 0;
    },
    totalAllText: function() {
      const total = this.total + this.shippingFee - (this.discount || 0);
      return total.toFixed(2);
    },
    disableCheckout: function() {
      if (this.order && this.order._id) {
        return !this.order.commodityItems.length;
      }
      return true;
    },
    commodityItems: function() {
      if (this.order && this.order._id) {
        return this.order.commodityItems;
      }
      return [];
    },
  },
  methods: {
    onDescriptionChange(e) {
      this.description = e.$wx.detail;
    },
    loadOrder(orderId) {
      req.order.get(orderId).then((res) => {
        if (res && res.success) {
          this.order = res && res.order;
          this.loadShippingFee();
        }
      });
    },
    loadDefaultAddress(address) {
      if (address) {
        this.address = address;
        this.loadShippingFee();
      } else {
        req.profile.defaultAddress(this.userId).then((res) => {
          this.address = (res && res.address) || {};
          this.loadShippingFee();
        });
      }
    },
    loadShippingFee() {
      if (this.address && this.address._id && this.order && this.order._id) {
        req.order
          .calculateShippingFee({
            orderId: this.order._id,
            areaValue: this.address.areaValue,
          })
          .then((res) => {
            if (res && res.success) {
              this.shippingFee = res.shippingFee;
            } else {
              this.shippingFee = shippingFee;
            }
          });
      }
    },
    onAddressClick() {
      //选择地址，跳转支付，回调然后保存订单
      const that = this;
      if (!this.disableCheckout) {
        wx.navigateTo({
          url: '/pages/addresses?type=select',
          events: {
            selected: function(data) {
              that.address = (data && data.address) || {};
              that.loadShippingFee();
            },
          },
        });
      }
    },
    onCheckoutClick() {
      if (!this.disableCheckout) {
        //更新订单地址，成功后调用支付接口进行支付，支付成功后修改订单状态
        req.order
          .updateAddressAndDes({
            id: this.order._id,
            description: this.description,
            address: this.address,
            shippingFee: this.shippingFee,
          })
          .then((res) => {
            if (res && res.success) {
              const payment = res.payment;
              wx.requestPayment({
                ...payment,
                success(res) {
                  console.log('pay success', res);
                  // 支付成功后修改订单并且清理购物车
                },
                fail(err) {
                  console.error('pay fail', err);
                  wx.showToast({ title: err.errMsg, icon: 'none' });
                },
              });
            }
          });
      }
    },
  },
  onLoad(options) {
    let that = this;
    wx.getSystemInfo({
      success: function(res) {
        that.windowHeight = res.windowHeight;
        that.windowWidth = res.windowWidth;
      },
    });
    this.userId = wx.getStorageSync('uid');
    const eventChannel = this.$wx.getOpenerEventChannel();
    eventChannel.on('acceptOrderFromCart', function(data) {
      that.order = data.order;
      if (that.order.address) {
        that.loadDefaultAddress(that.order.address);
      } else {
        that.loadDefaultAddress(that.order.address);
      }
      that.description = that.order.description;
    });
    if (options.orderId) {
      this.orderId = options.orderId;
      this.loadOrder(options.orderId);
    }
  },
  onPullDownRefresh() {
    this.loadOrder(this.order._id);
    wx.stopPullDownRefresh();
  },
});
</script>

<config>
{
    "enablePullDownRefresh": true,
    "navigationBarTitleText": "老三家",
    "usingComponents": {
      "van-button": "~@/components/vant/button",
      "van-divider": "~@/components/vant/divider",
      "van-icon": "~@/components/vant/icon",
      "van-cell-group": "~@/components/vant/cell-group",
      "van-field": "~@/components/vant/field",
      "checkoutitem": "~@/components/checkoutitem",
      "checkoutsummary": "~@/components/checkoutsummary",
    }
}